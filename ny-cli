#!/bin/bash
#Version 
version="2.1.0"

#Dependencies
old_ifs="${IFS}"
cache_dir="${HOME}/.cache/ny-cli"
logo="${HOME}/.cache/ny-cli/logo.png"
download_dir="${HOME}/Downloads/"
logFile="history.ini"
github_source="https://raw.githubusercontent.com/meteor314/ny-cli/master/ny-cli"
export LC_ALL=en_US.utf8  



#Out put text color
#Reset
Color_Off='\033[0m'       # Text Reset
# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;36m'         # Blue suck
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White


#Colorsized text function

print_green() { # Print green text
	echo -e "${Green}" "${*}"
}
no_color() { # Print green text
	echo -e "${Color_Off}" "${*}"
}
print_red() { # Print green text
	echo -e "${Red}" "${*}"
}

print_blue() { # Print green text
	echo -e "${Blue}" "${*}"
}

print_white() { # Print green text
	echo -e "${White}" "${*}"
}


print_purple() { # Print green text
	echo -e "${Purple}" "${*}"
}

print_cyan() { # Print green text
	echo -e "${Cyan}" "${*}"
}
print_yellow () { # Print yellow text
	echo -e "${Yellow}" "${*}"

}


print_list_item() { 
	printf "${Yellow}%s${Color_Off} ${Color_Off}%s${Color_Off}\n" "[${1}]" "${2}"
}


######################
# Auxilary functions #
######################

show_help() {
	while IFS= read -r line; do
		printf "%s\n" "${line}"
	done <<-EOF
	
    ny-cli ${version} ( github.com/meteor314/ny-cli ). Bash script for  torrent via the terminal
	Usage:
	  ny-cli [Options]
	Options:
	  -h, --help		Print this help page
	  -V, --version		Print version number
	  -u, --update		Fetch latest version from the Github repository
	  -c, --cache-size	Print cache size (${cache_dir})
	  -C, --clear-cache	Clear cache (${cache_dir})
	EOF
}

welcome_msg() {
	while IFS= read -r line; do
		printf "%s\n" "${line}"
	done <<-EOF
	ny-cli ${version}
	It seems like you are using ny-cli for the first time.
	Please try ny-cli -h for help and another options.
	EOF
}

error () {
	# display an error message in red
	print_red "$*" >&2
}



die () {
	error "$*"
	exit 1
}

check_dependencies () {
	# checks if dependencies are present

	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			if [ "$dep" = "stream" ]; then
				error "Program \"$dep\" not found. Please install it with this command \"npm install @meteor314/stream -g\""
			else 
				error "Program \"$dep\" not found. Please install it. \n Type \"scoop install $dep\" if you're using windows or type apt-get install $dep"
			fi

			print_white "Exiting..."
			die			
		fi
	done

}
check_dependencies

prompt() { 
	# Print text in green (${1}) and blue (${2}) 
	printf "${Yellow}%s${Color_Off} ${Blue}%s${Color_Off}" "${1}" "${2}"

	# Prompt user and save user input to the variable 'reply'
	read -r reply 
}


#detec user os 


#detec user os 

detect_os() {
	UNAME=$( command -v uname)

	case $( "${UNAME}" | tr '[:upper:]' '[:lower:]') in
	linux*)
		print_blue 'Linux detected ^-^,  opening default file manager \n'
		notify-send "ny-cli" \ "Download Finish, you can quit this application." -i "${logo}"
		xdg-open "${download_dir}"
		;;
	darwin*)
		printf 'darwin\n'
		;;
	msys*|cygwin*|nt|win*|mingw*)
		$(echo ${torrent_title_input} | sed 's/ /+/g')
		download_dir=$(echo ${download_dir} | sed 's/\\\\/\\/g') #replace C:\\user by C:\user else explorer can not open file manager.
		print_blue 'Window detected ^-^,  opening default file manager \n'
		start "${download_dir}"
		;;
	esac
	exit 1
}
###################
# Cache functions #
###################


show_cache_size() {

	cache_size="$(du -sh "${cache_dir}" | awk '{print $1}')"

	print_green "Cache size: ${cache_size} (${cache_dir})"
}

clear_cache() {
	show_cache_size

	prompt "Proceed with clearing the cache?" "[Y/N]: "

	# Convert user input to lowercase
	user_input="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

	if [[ "${user_input}" == "y" ]]; then
		rm -r "${cache_dir:?}/"
		print_green "Cache successfully cleared"
	fi
}

create_cache_folder() {
	# If cache_dir does not exist, create it
	if [[ ! -d "${cache_dir}" ]]; then
		mkdir --parents "${cache_dir}"
	fi
	cd ${cache_dir}
	#import logo if not exist
	if [[ ! -f "${logo}" ]];then
		welcome_msg
		curl --silent -o logo.png "https://raw.githubusercontent.com/meteor314/ny-cli/master/src/ny-cli.png"
	fi
	#if history is empty or doesnot exizt logo if not exist
	if [[ ! -f "${logFile}" ]];then
		touch "${logFile}"
	fi

}

################
# Show Version #
################

show_version() {
	print_green "Version: ${version}"
}


#################
# Update Script #
#################

update_script() {
	print_green "Fetching Github repository..."

	# Get latest source code and compare it with this script
	changes="$(curl --silent "${github_source}" | diff -u "${0}" -)"

	if [[ -z "${changes}" ]]; then # If variable 'changes' is empty 
		print_green "Script is up to date"
	else
		if printf '%s\n' "${changes}" | patch --silent "${0}" -; then
			print_green "Script successfully updated"
		else
			print_red "ERROR: Something went wrong"
		fi
	fi
}


while [[ "${1}" ]]; do
	case "${1}" in
		-h|--help)
			show_help
			exit 0
			;;
		-V|--version)
			show_version
			exit 0
			;;
		-u|--update)
			update_script
			exit 0
			;;
		-c|--cache-size)
			show_cache_size
			exit 0
			;;
		-C|--clear-cache)
			clear_cache
			exit 0
			;;
		*)	
			show_help
			exit 1
			;;
	esac

	shift
done


#################
# Main Function #
#################
# Call 'reset_ifs' function when exiting script



download_torrent() {

	prompt "Do you want to download in a specfic folder ? (Default folder is ${download_dir}) [y/N]:"
	user_download_dir_folder="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

	if [[ "${user_download_dir_folder}" == y ]]; then
		prompt   "Specify a folder:"
		user_download_dir_folder="$(printf "%s" "${reply}")"
		if [[ ! -d ${user_download_dir_folder} ]]; then
			print_red "Error can not found : ${user_download_dir_folder} folder. Torrent will be download in : ${download_dir}). "
			prompt "Press enter to continue:"
			
		else 	
			download_dir=${user_download_dir_folder}
		fi
	fi

	#verify if title alreday exist in the db :)
	if ! grep  -q $magnet $logFile;	then
		echo -e "${title},${download_dir},${magnet}\n$(cat $logFile)" > ${logFile} #append at the beginning.
	fi
	
	print_cyan "Content of this torrent, all files will download in $download_dir, press enter to continue"
	stream   "$magnet" --path "${download_dir}"  -a --no-quit --list --exit    # to do fix bugs, fs => fullscreen
	detect_os
}

watch_torrent() {
	stream  "$magnet" --list --mpv --subtitles --remove --not-on-top #   -r, --remove       remove files on exit
}

download_from_history() {

	test=$(cat  $logFile  | fzf) 
	if [[  -z $test ]]; then
		print_red "No torrent selected ..."
		print_white "Exiting ..."
		sleep 1
		die
	fi
	download_dir=$(echo "$test" | awk -F ',' '{print $2}' | sed 's/\\/\\\\/g')   #replace \ => \\ for windows
	magnet=$(echo "$test" | awk -F ',' '{print $3}' | sed 's/ //g') #trim


	echo "Dwonload dir is:$download_dir"
	echo "Magnet is : $magnet"		
	if [[ ! -d $download_dir ]]; then
		print_red "Error occured,folder:$download_dir not found, error 404 :\ "
		die
	fi
	print_purple "Content of this torrent, all files will download in $download_dir, press enter to continue"
	stream   "$magnet" --path "${download_dir}"  -a --no-quit --list --exit   # to do fix bugs, fs => fullscreen
	detect_os	


}

##################
# export history #
##################

#export histroy and rename as csv file

export_history() {
	if [[ ! -f ${cache_dir}/$logFile ]];then
		print_red "History is empty"
		print_white "Exiting ..."
		sleep 1
		die
	fi
	print_purple "Exporting database  : ${cache_dir}/$logFile to ${HOME}/Desktop/ny-cli-history-torrent.csv"
	cp ${cache_dir}/$logFile ${HOME}/Desktop/ny-cli-history-torrent.csv
	die

}
#############
# find link #
#############

search_torrent_from_nyaasi() { 
	torrent_title_input=$(echo ${torrent_title_input} | sed 's/ /+/g') #replace space by +  for example detah note => death+note
	
	print_green "Searching for '${torrent_title_input}'..."
	curl --silent --compressed "https://nyaa.si/?f=0&c=0_0&q=${torrent_title_input}&s=seeders&o=desc" > tmp.html 
	echo "Link find : https://nyaa.si/?f=0&c=0_0&q=${torrent_title_input}&s=seeders&o=desc" 
	

	#regex= $(cat tmp.html | grep -Eo "magnet:(.)[a-zA-Z0-9./?=_%:-]*" | fzf) 
	title=$( cat tmp.html | grep -Eo "view\/[0-9]{5,9}\" title=\"[^\"]*" | fzf  ) 	 # Extract text before \" in a string using regex and user can select the content with fzf	
	echo $title > tmp.html
	web_site_link_id=$(cat tmp.html | grep -Eo '[0-9]{5,9}')
	echo $web_site_link_id
	echo $web_site_link_id > tmp.html	
	web_site_link_id="https://nyaa.si/view/${web_site_link_id}" # >tmp.html
	curl --silent --globoff ${web_site_link_id} > tmp.html	
}
# search from piratebay
search_torrent_from_piratebay() {
	torrent_title_input=${torrent_title_input// /%20} #replace space by %20  for example detah note => death%20note
	

	curl --silent -o tmp.html "https://thepiratebay.party/search/${torrent_title_input}/1/99/0"
	title=$(cat tmp.html | grep -Eo "torrent\/[0-9]{6,8}\/[^\"]*" | fzf)

	title="https://thepiratebay.party/${title}"

	print_yellow "Torrent find ${title}"

	curl --silent --globoff "$title" > tmp.html 
	#exemple of url :magnet:?xt=urn:btih:554491C7E605D11BF30324D5E4CA4509D0662A9E
}
search_from() {
	print_list_item "1" "Search from nyaa.si (recommanded for animes)"
	print_list_item "2" "Search from piratebay (recommanded for films, series or video games)"

	if [[ -z "${web_site}" ]];then
		prompt "Please chose a nubmer (or press enter to continue, by default it's piratebay):  "
		web_site="${reply}"
	fi
	[[ $web_site ]] && [ $web_site -eq $web_site 2>/dev/null ] ||  web_site=2 # if input is not a number, set default value to  piratebay
	return $web_site

}
################
# find torrent #
################
search_torrent () {

	search_from
	
	if [[ -z "${torrent_title_input}" ]];then
		prompt "Search torrent : "
		torrent_title_input="${reply}"
	fi

	if [[ $web_site -eq 1 ]]; then
		search_torrent_from_nyaasi
	else
		search_torrent_from_piratebay
	fi


	
	# find only first orrcurence of magnet link with regex
	magnet=$(cat tmp.html | grep -Eo "magnet:(.)[a-zA-Z0-9./?=_%:-]*" | head -1) # match only first occurence

	if [[ -z "$magnet" ]]; then # if torrent is unavailable
		print_red "An error occured, could not find this link, please chose another torrent :-("
		print_purple "the torrents are chosen according to their popularity/number of seeders. \n Please choose among the first torrents proposed for a better experience."		

		prompt  "Do you want to continue ?" "[Y/n]: "
		user_input="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

		#exemple of url :magnet:?xt=urn:btih:554491C7E605D11BF30324D5E4CA4509D0662A9E
		if [[ "${user_input}" == "n" ]]; then
			die
		fi
		torrent_title_input=
		clear
		main
	fi
	print_green  "Magnet link find $magnet \n web_site_link_id : ${web_site_link_id} \n title  : ${title}"

	case "${user_input}" in
		d)
			download_torrent
			return 1
			;;
		w)
			watch_torrent
			return 1
			;;
	
	esac


}




input_controls() {

	print_list_item "w" "Watch films, animes"
	print_list_item "d" "Download films, animes (recommanded)"
	print_list_item "h" "Continue unfinshed download torrent"
	print_list_item "e" "Export history as csv file"
	print_list_item "q" "Exit"

	printf "\n"
	prompt "Enter input:"
	user_input="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

	case "${user_input}" in
		w|watch|d|download)
			search_torrent
			return 1
			;;
		h|history)
			download_from_history
			return 1
			;;
		e|export)
			export_history
			exit 0
			;; 
		q|quit|exit)
			clear
			exit 0
			;;
	esac

	clear
	input_controls
}

check_dependencies "curl" "fzf" "patch" "mkdir" "cat" "sed" "grep" "git" "mpv" "stream"
create_cache_folder



main() {
	input_controls
	search_torrent
}


main
