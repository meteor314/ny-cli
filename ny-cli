#!/bin/bash
#Version 
version="1.5.1"

#Dependencies
old_ifs="${IFS}"
cache_dir="${HOME}/.cache/ny-cli"
github_source="https://raw.githubusercontent.com/meteor314/ny-cli/master/ny-cli"
#!/bin/bash


#Out put text color
#Reset
Color_Off='\033[0m'       # Text Reset
# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White


#Colorsized text function

print_green() { # Print green text
	echo -e "${Green}" "${*}"
}
no_color() { # Print green text
	echo -e "${Color_Off}" "${*}"
}
print_red() { # Print green text
	echo -e "${Red}" "${*}"
}

print_blue() { # Print green text
	echo -e "${Blue}" "${*}"
}

print_white() { # Print green text
	echo -e "${White}" "${*}"
}


print_list_item() { 
	printf "${Blue}%s${Color_Off} ${Color_Off}%s${Color_Off}\n" "[${1}]" "${2}"
}


######################
# Auxilary functions #
######################

show_help() {
	while IFS= read -r line; do
		printf "%s\n" "${line}"
	done <<-EOF
	
    ny-cli ${version} ( github.com/meteor314/ny-cli ). Bash script for  torrent via the terminal
	Usage:
	  ny-cli [Options]
	Options:
	  -h, --help		Print this help page
	  -V, --version		Print version number
	  -u, --update		Fetch latest version from the Github repository
	  -c, --cache-size	Print cache size (${cache_dir})
	  -C, --clear-cache	Clear cache (${cache_dir})
	EOF
}
error () {
	# display an error message in red
	print_red "$*" >&2
}


die () {
	error "$*"
	exit 1
}

check_dependencies () {
	# checks if dependencies are present

	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			if [ "$dep" = "peerflix" ]; then
				error "Program \"$dep\" not found. Please install it. Type \"scoop install $dep -g\" if you're using windows or Type \"sudo npm install $dep -g\""
			else 
				error "Program \"$dep\" not found. Please install it. \n Type \"scoop install $dep\" if you're using windows or Type apt-get install $dep"
			fi

			print_white "Exiting..."
			die			
		fi
	done

}
check_dependencies

prompt() { 
	# Print text in green (${1}) and blue (${2}) 
	printf "${Green}%s${Color_Off} ${Blue}%s${Color_Off}" "${1}" "${2}"

	# Prompt user and save user input to the variable 'reply'
	read -r reply 
}


#detec user os 

detect_os() {
	UNAME=$( command -v uname)

	case $( "${UNAME}" | tr '[:upper:]' '[:lower:]') in
	linux*)
		printf 'linux\n'
		;;
	darwin*)
		printf 'darwin\n'
		;;
	msys*|cygwin*|mingw*)
		# or possible 'bash on windows'
		printf 'windows\n'
		;;
	nt|win*)
		printf 'windows\n'
		;;
	*)
		printf 'unknown\n'
		;;
	esac
}
###################
# Cache functions #
###################


show_cache_size() {
	# If cache_dir does not exist, create it
	if [[ ! -d "${cache_dir}" ]]; then
		mkdir --parents "${cache_dir}"
	fi

	cache_size="$(du -sh "${cache_dir}" | awk '{print $1}')"

	print_green "Cache size: ${cache_size} (${cache_dir})"
}

clear_cache() {
	show_cache_size

	prompt "Proceed with clearing the cache?" "[Y/N]: "

	# Convert user input to lowercase
	user_input="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

	if [[ "${user_input}" == "y" ]]; then
		rm -r "${cache_dir:?}/"
		print_green "Cache successfully cleared"
	fi
}

################
# Show Version #
################

show_version() {
	print_green "Version: ${version}"
}


#################
# Update Script #
#################

update_script() {
	print_green "Fetching Github repository..."

	# Get latest source code and compare it with this script
	changes="$(curl --silent "${github_source}" | diff -u "${0}" -)"

	if [[ -z "${changes}" ]]; then # If variable 'changes' is empty 
		print_green "Script is up to date"
	else
		if printf '%s\n' "${changes}" | patch --silent "${0}" -; then
			print_green "Script successfully updated"
		else
			print_red "ERROR: Something went wrong"
		fi
	fi
}


while [[ "${1}" ]]; do
	case "${1}" in
		-h|--help)
			show_help
			exit 0
			;;
		-V|--version)
			show_version
			exit 0
			;;
		-u|--update)
			update_script
			exit 0
			;;
		-c|--cache-size)
			show_cache_size
			exit 0
			;;
		-C|--clear-cache)
			clear_cache
			exit 0
			;;
		*)	
			show_help
			exit 1
			;;
	esac

	shift
done


#################
# Main Function #
#################
# Call 'reset_ifs' function when exiting script

#check_dependencies ? // to do


search_torrent () {
	if [ -z "${torrent_title_input}"];then
		prompt "Search torrent : "
		torrent_title_input="${reply}"
		torrent_title_input=${torrent_title_input// /+} #replace space by +  for example detah note => death+note
	fi


	print_green "Searching for '${torrent_title_input}'..."
	curl --silent --compressed "https://nyaa.si/?f=0&c=0_0&q=${torrent_title_input}&s=seeders&o=desc" > tmp.html 
	echo "Link find : https://nyaa.si/?f=0&c=0_0&q=${torrent_title_input}&s=seeders&o=desc" 
	
	text=$(cat tmp.html)

	#regex= $(cat tmp.html | grep -Eo "magnet:(.)[a-zA-Z0-9./?=_%:-]*" | fzf) 
	title=$( cat tmp.html | grep -Po "view\/[0-9]{5,9}\" title=\"[^\"]*" | fzf  ) 	 # Extract text before \"" in a string using regex and user can select the content with fzf
	echo $title > tmp.html
	



	title=$(cat tmp.html | grep -Po '[0-9]{5,9}')
	echo $title
	echo $title > tmp.html

	
	title="https://nyaa.si/view/${title}" # >tmp.html
	curl  ${title} > tmp.html
	sleep 1
	peerflix  $(cat tmp.html | grep -Eo "magnet:(.)[a-zA-Z0-9./?=_%:-]*") -l -k -t # print only 7 torrent, and -k = play with mpv


}



input_controls() {

	print_list_item "a" "Search another torrent"
	print_list_item "q" "Exit"

	printf "\n"
	prompt "Enter input:"
	user_input="$(printf "%s" "${reply}" | tr "[:upper:]" "[:lower:]")"

	case "${user_input}" in
		a)
			torrent_title_input=
			clear
			main
			return 1
			;;
		q)
			clear
			exit 0
			;;
	esac
	
	clear
	input_controls
}

check_dependencies "curl" "fzf" "patch" "mkdir" "cat" "sed" "grep" "git" "mpv"  "npm"  "peerflix"

main() {
	check_dependencies # //To fix
	search_torrent
	input_controls
	detect_os
}

main